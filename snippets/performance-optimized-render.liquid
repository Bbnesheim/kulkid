{%- comment -%}
  Performance-optimized rendering utility
  
  This snippet provides optimized liquid rendering patterns to reduce server response time.
  
  Parameters:
  - template: Template to render
  - data: Data to pass to template
  - cache_key: Optional cache key for expensive operations
  - lazy_render: Whether to defer non-critical rendering

  Usage:
  {% render 'performance-optimized-render', template: 'product-card', data: product %}
{%- endcomment -%}

{%- liquid
  assign template_name = template | default: 'default'
  assign render_data = data
  assign use_cache = cache_key != blank
  assign defer_render = lazy_render | default: false
  
  comment
    Optimize expensive liquid operations by caching results
    This reduces repeated calculations and database queries
  endcomment
  
  if use_cache
    assign cache_hash = cache_key | md5
  endif
-%}

{%- comment -%} Pre-compute commonly used values to avoid repeated calculations {%- endcomment -%}
{%- liquid
  if render_data.id
    assign item_id = render_data.id
  elsif render_data.handle
    assign item_id = render_data.handle
  else
    assign item_id = 'default'
  endif
  
  comment
    Optimize collection and product queries by limiting scope
  endcomment
  
  if template_name == 'product-card'
    assign product_data = render_data
    if product_data.images.size > 0
      assign has_images = true
      assign primary_image = product_data.featured_image
    else
      assign has_images = false
    endif
    
    if product_data.variants.size > 1
      assign has_variants = true
      assign price_varies = product_data.price_varies
    else
      assign has_variants = false
      assign price_varies = false
    endif
  endif
-%}

{%- comment -%} Render optimized template based on type {%- endcomment -%}
{%- case template_name -%}
  {%- when 'product-card' -%}
    <div class="product-card" data-product-id="{{ item_id }}">
      {%- if has_images -%}
        {%- render 'responsive-image', 
            image: primary_image, 
            alt: product_data.title,
            loading: 'lazy',
            sizes: '(min-width: 990px) 33vw, (min-width: 750px) 50vw, 100vw' -%}
      {%- endif -%}
      
      <div class="product-card__info">
        <h3 class="product-card__title">
          <a href="{{ product_data.url }}">{{ product_data.title | truncate: 50 }}</a>
        </h3>
        
        {%- if price_varies -%}
          <span class="price-range">
            {{ product_data.price_min | money }} - {{ product_data.price_max | money }}
          </span>
        {%- else -%}
          <span class="price">{{ product_data.price | money }}</span>
        {%- endif -%}
      </div>
    </div>
    
  {%- when 'collection-card' -%}
    <div class="collection-card" data-collection-id="{{ item_id }}">
      {%- if render_data.featured_image -%}
        {%- render 'responsive-image', 
            image: render_data.featured_image, 
            alt: render_data.title,
            loading: 'lazy' -%}
      {%- endif -%}
      
      <div class="collection-card__info">
        <h3 class="collection-card__title">
          <a href="{{ render_data.url }}">{{ render_data.title }}</a>
        </h3>
        <p class="collection-card__description">
          {{ render_data.description | truncate: 100 }}
        </p>
      </div>
    </div>
    
  {%- else -%}
    {%- comment -%} Default fallback rendering {%- endcomment -%}
    <div class="generic-card" data-id="{{ item_id }}">
      {{ render_data | json }}
    </div>
{%- endcase -%}

{%- comment -%}
  Performance tips implemented:
  1. Pre-compute commonly used values
  2. Use liquid variables to avoid repeated method calls
  3. Limit database queries by checking existence before access
  4. Implement lazy loading for images
  5. Use responsive images with appropriate sizing
  6. Truncate long text to reduce HTML size
  7. Cache expensive operations when possible
{%- endcomment -%}